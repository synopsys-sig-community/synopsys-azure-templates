parameters:
  coverity_url: ""
  coverity_username: ""
  coverity_passphrase: ""
  coverity_checkers: ""
  security_gate_view: ""
  system_accesstoken: ""

jobs:
  - job: Coverity

    variables:
      BUILD_COMMAND_TEST: '${{ variables.BUILD_COMMAND }}'

    steps:
      # This step is helpful for troubleshooting
      - bash: env
        env:
          COV_USER: $(COV_USER)
          COVERITY_PASSPHRASE: $(COVERITY_PASSPHRASE)
          SYSTEM_ACCESSTOKEN: $(System.AccessToken)
        displayName: Diagnostics

      # Initialize liense
      - bash: |
          echo $COVERITY_LICENSE > coverity-license.dat
        displayName: Initialize License
        env:
          COVERITY_LICENSE: $(COVERITY_LICENSE)

      # Create project and stream if they don't exist
      - bash: |
          set -x
          export COVERITY_STREAM_NAME=${BUILD_REPOSITORY_NAME}-${BUILD_SOURCEBRANCHNAME}
          echo Ensure that stream "$COVERITY_STREAM_NAME" exists
          cov-manage-im --url $COVERITY_URL --on-new-cert trust --mode projects --add --set name:"$COVERITY_STREAM_NAME" || true
          cov-manage-im --url $COVERITY_URL --on-new-cert trust --mode streams --add -set name:"$COVERITY_STREAM_NAME" || true
          cov-manage-im --url $COVERITY_URL --on-new-cert trust --mode projects --update --name "$COVERITY_STREAM_NAME" --insert stream:"$COVERITY_STREAM_NAME" || true
        displayName: Create project and stream
        # Run full analysis only on builds of master, not on pull requests
        condition: eq(variables['Build.SourceBranchName'], 'master')
        env:
          COV_USER: $(COV_USER)
          COVERITY_PASSPHRASE: $(COVERITY_PASSPHRASE)

      # Build capture if specified
      - bash: |
          cov-build --dir idir $BUILD_COMMAND
        displayName: Capture source code
        # Run full analysis only on builds of master, not on pull requests
        condition: ne(variables['BUILD_COMMAND_TEST'], '')

      # Automatic capture if build command not specified
      - bash: |
          cov-capture --project-dir . --dir idir
        displayName: Capture source code
        # Run full analysis only on builds of master, not on pull requests
        condition: eq(variables['Build.SourceBranchName'], 'master')

      # Run full analysis
      - bash: |
          set -x
          cov-analyze --dir idir --security-file coverity-license.dat --ticker-mode no-spin ${{ parameters.coverity_checkers }} --strip-path `pwd`
        displayName: Analyze source (full)
        # Run full analysis only on builds of master, not on pull requests
        condition: eq(variables['Build.SourceBranchName'], 'master')

      # Commit full analysis
      - bash: |
          set -x
          export COVERITY_STREAM_NAME=${BUILD_REPOSITORY_NAME}-${BUILD_SOURCEBRANCHNAME}
          cov-commit-defects --security-file coverity-license.dat --url ${COVERITY_URL} --stream $COVERITY_STREAM_NAME --dir idir --on-new-cert trust --ticker-mode no-spin | tee idir/commit-log.txt
          cov-format-errors --security-file coverity-license.dat --dir idir --json-output coverity-results.json
        displayName: Commit full analysis results
        # Run full analysis only on builds of master, not on pull requests
        condition: eq(variables['Build.SourceBranchName'], 'master')
        env:
          COV_USER: $(COV_USER)
          COVERITY_PASSPHRASE: $(COVERITY_PASSPHRASE)

      # Run incremental analysis
      - bash: |
          set -x
          REMOVE="refs/heads/"
          export SYSTEM_PULLREQUEST_TARGETBRANCHNAME="${SYSTEM_PULLREQUEST_TARGETBRANCH//$REMOVE/}"
          export COVERITY_STREAM_NAME=${BUILD_REPOSITORY_NAME}-${SYSTEM_PULLREQUEST_TARGETBRANCHNAME}
          git --no-pager diff origin/${SYSTEM_PULLREQUEST_TARGETBRANCHNAME} --name-only > coverity-changed-files.txt
          cat coverity-changed-files.txt
          cov-run-desktop --security-file coverity-license.dat --dir idir --strip-path `pwd` --url ${COVERITY_URL} --on-new-cert trust --stream $COVERITY_STREAM_NAME --json-output-v7 coverity-results.json `cat coverity-changed-files.txt`
          grep -q "does not exist or you do not have permission" idir/output/cov-run-desktop-log.txt
          if [ $? -eq 0 ]; then
            echo Incremental analysis failed due to no baseline in $COVERITY_STREAM_NAME
            export COVERITY_STREAM_NAME=${BUILD_REPOSITORY_NAME}-${BUILD_SOURCEBRANCHNAME}
            echo Running full analysis with COVERITY_STREAM=$COVERITY_STREAM_NAME
            cov-analyze --dir idir --security-file coverity-license.dat --ticker-mode no-spin ${{ parameters.coverity_checkers }} --strip-path `pwd`
            cov-format-errors --security-file coverity-license.dat --dir idir --json-output-v7 coverity-results.json
          fi
        displayName: Analyze source (incremental)
        # Run full analysis only on builds of master, not on pull requests
        condition: eq(variables['Build.Reason'], 'PullRequest')
        env:
          COV_USER: $(COV_USER)
          COVERITY_PASSPHRASE: $(COVERITY_PASSPHRASE)
