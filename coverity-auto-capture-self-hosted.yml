parameters:
  coverity_url: ""
  coverity_username: ""
  coverity_passphrase: ""
  coverity_checkers: "--webapp-security"
  security_gate_view: ""
  system_accesstoken: ""

jobs:
  - job: Coverity

    variables:
      SYSTEM_ACCESSTOKEN_PARAM: ${{ parameters.system_accesstoken }}
      COVERITY_CONFIG: ./coverity-data/coverity_config.xml
      SYNOPSYS_AZURE_TOOLS_REPO: https://github.com/synopsys-sig-community/synopsys-azure-tools

    steps:

      # This step is helpful for troubleshooting
      - bash: env
        env:
          COV_USER: $(COV_USER)
          COVERITY_PASSPHRASE: $(COVERITY_PASSPHRASE)
          SYSTEM_ACCESSTOKEN: $(System.AccessToken)
        displayName: Diagnostics

      # Initialize liense
      - bash: |
          echo $COVERITY_LICENSE > coverity-license.dat
        displayName: Initialize License
        env:
          COVERITY_LICENSE: $(COVERITY_LICENSE)

      # Create project and stream if they don't exist
      - bash: |
          export COVERITY_STREAM_NAME=${BUILD_REPOSITORY_NAME}-${BUILD_SOURCEBRANCHNAME}
          echo Ensure that stream "$COVERITY_STREAM_NAME" exists
          echo cov-manage-im --url $COVERITY_URL --on-new-cert trust --mode projects --add --set name:"$COVERITY_STREAM_NAME" || true
          cov-manage-im --url $COVERITY_URL --on-new-cert trust --mode projects --add --set name:"$COVERITY_STREAM_NAME" || true
          echo cov-manage-im --url $COVERITY_URL --on-new-cert trust --mode streams --add -set name:"$COVERITY_STREAM_NAME" || true
          cov-manage-im --url $COVERITY_URL --on-new-cert trust --mode streams --add -set name:"$COVERITY_STREAM_NAME" || true
          echo cov-manage-im --url $COVERITY_URL --on-new-cert trust --mode projects --update --name "$COVERITY_STREAM_NAME" --insert stream:"$COVERITY_STREAM_NAME" || true
          cov-manage-im --url $COVERITY_URL --on-new-cert trust --mode projects --update --name "$COVERITY_STREAM_NAME" --insert stream:"$COVERITY_STREAM_NAME" || true
        displayName: Create project and stream
        # Run full analysis only on builds of master, not on pull requests
        condition: eq(variables['Build.SourceBranchName'], 'master')
        env:
          COV_USER: $(COV_USER)
          COVERITY_PASSPHRASE: $(COVERITY_PASSPHRASE)

      # Auto-capture source code - all of it, for full analysis
      - bash: |
          cov-capture --project-dir . --dir ./coverity-data/idir
        displayName: Capture source code (Full)
        # Run full analysis only on builds of master, not on pull requests
        condition: eq(variables['Build.SourceBranchName'], 'master')

      # Auto-capture source code - just changed files, for incremental analysis
      - bash: |
          REMOVE="refs/heads/"
          echo export SYSTEM_PULLREQUEST_TARGETBRANCHNAME="${SYSTEM_PULLREQUEST_TARGETBRANCH//$REMOVE/}"
          echo git --no-pager diff origin/${SYSTEM_PULLREQUEST_TARGETBRANCHNAME} --name-only
          export SYSTEM_PULLREQUEST_TARGETBRANCHNAME="${SYSTEM_PULLREQUEST_TARGETBRANCH//$REMOVE/}"
          git --no-pager diff origin/${SYSTEM_PULLREQUEST_TARGETBRANCHNAME} --name-only > ./coverity-changed-files.txt
          set -x
          cov-capture --dir ./coverity-data/idir --source-list coverity-changed-files.txt
        displayName: Capture source code (Incremental)
        # Only annotate pull requests if... we are building for a pull request
        condition: eq(variables['Build.Reason'], 'PullRequest')

      # Run full analysis
      - bash: |
          echo cov-analyze --dir ./coverity-data/idir --security-file coverity-license.dat --ticker-mode no-spin ${{ parameters.coverity_checkers }} --strip-path `pwd`
          cov-analyze --dir ./coverity-data/idir --security-file coverity-license.dat --ticker-mode no-spin ${{ parameters.coverity_checkers }} --strip-path `pwd`
        displayName: Analyze source (full)
        # Run full analysis only on builds of master, not on pull requests
        condition: eq(variables['Build.SourceBranchName'], 'master')

      # Commit full analysis
      - bash: |
          export COVERITY_STREAM_NAME=${BUILD_REPOSITORY_NAME}-${BUILD_SOURCEBRANCHNAME}
          echo cov-commit-defects --security-file coverity-license.dat --url ${COVERITY_URL} --stream $COVERITY_STREAM_NAME --dir coverity-data/idir --on-new-cert trust --ticker-mode no-spin
          cov-commit-defects --security-file coverity-license.dat --url ${COVERITY_URL} --stream $COVERITY_STREAM_NAME --dir coverity-data/idir --on-new-cert trust --ticker-mode no-spin | tee coverity-data/idir/commit-log.txt
          cov-format-errors --security-file coverity-license.dat --dir coverity-data/idir --json-output-v8 coverity-output-v8.json
        displayName: Commit full analysis results
        # Run full analysis only on builds of master, not on pull requests
        condition: eq(variables['Build.SourceBranchName'], 'master')
        env:
          COV_USER: $(COV_USER)
          COVERITY_PASSPHRASE: $(COVERITY_PASSPHRASE)

      # Run incremental analysis
      - bash: |
          set -x
          REMOVE="refs/heads/"
          export SYSTEM_PULLREQUEST_TARGETBRANCHNAME="${SYSTEM_PULLREQUEST_TARGETBRANCH//$REMOVE/}"
          export COVERITY_STREAM_NAME=${BUILD_REPOSITORY_NAME}-${SYSTEM_PULLREQUEST_TARGETBRANCHNAME}
          git --no-pager diff origin/${SYSTEM_PULLREQUEST_TARGETBRANCHNAME} --name-only > coverity-changed-files.txt
          cat coverity-changed-files.txt
          cov-run-desktop --security-file coverity-license.dat --dir coverity-data/idir --strip-path `pwd` --url ${COVERITY_URL} --on-new-cert trust --stream $COVERITY_STREAM_NAME --json-output-v7 coverity-output-v7.json --webapp-security `cat coverity-changed-files.txt`
          grep -q "does not exist or you do not have permission" coverity-data/idir/output/cov-run-desktop-log.txt
          if [ $? -eq 0 ]; then
            echo Incremental analysis failed due to no baseline in $COVERITY_STREAM_NAME
            export COVERITY_STREAM_NAME=${BUILD_REPOSITORY_NAME}-${BUILD_SOURCEBRANCHNAME}
            echo Running full analysis with COVERITY_STREAM=$COVERITY_STREAM_NAME
            cov-analyze --dir ./coverity-data/idir --security-file coverity-license.dat --ticker-mode no-spin ${{ parameters.coverity_checkers }} --strip-path `pwd`
            cov-format-errors --security-file coverity-license.dat --dir coverity-data/idir --json-output-v7 coverity-output-v7.json
          fi
        displayName: Analyze source (incremental)
        # Run full analysis only on builds of master, not on pull requests
        condition: eq(variables['Build.Reason'], 'PullRequest')
        env:
          COV_USER: $(COV_USER)
          COVERITY_PASSPHRASE: $(COVERITY_PASSPHRASE)

      - bash: git clone -q --depth 1 $SYNOPSYS_AZURE_TOOLS_REPO
        displayName: Get Synopsys Azure Tools
        # Get automation if either master or pull request
        condition: or(eq(variables['Build.SourceBranchName'], 'master'), eq(variables['Build.Reason'], 'PullRequest'))

      - script: pip3 install --upgrade pandas requests jsonapi_requests suds azure azure-devops
        displayName: Install Python Module Dependencies
        condition: or(eq(variables['Build.SourceBranchName'], 'master'), eq(variables['Build.Reason'], 'PullRequest'))

      - bash: |
          REMOVE="refs/heads/"
          export SYSTEM_PULLREQUEST_TARGETBRANCHNAME="${SYSTEM_PULLREQUEST_TARGETBRANCH//$REMOVE/}"
          export COVERITY_STREAM_NAME=${BUILD_REPOSITORY_NAME}-${SYSTEM_PULLREQUEST_TARGETBRANCHNAME}
          echo python3 synopsys-azure-tools/azure-coverity-annotate-pr.py --debug 9 --coverity-json coverity-output-v7.json --url ${COVERITY_URL} --stream ${COVERITY_STREAM_NAME}
          python3 synopsys-azure-tools/azure-coverity-annotate-pr.py --debug 9 --coverity-json coverity-output-v7.json --url ${COVERITY_URL} --stream ${COVERITY_STREAM_NAME}
        env:
          SYSTEM_ACCESSTOKEN: $(System.AccessToken)
          COV_USER: $(COV_USER)
          COVERITY_PASSPHRASE: $(COVERITY_PASSPHRASE)
        displayName: Annotate pull request
        # Only create work items for pushes to a main branch
        condition: eq(variables['Build.Reason'], 'PullRequest')

      # Export newly found issues as Azure boards work items
      - bash: |
          REMOVE="refs/heads/"
          export COVERITY_STREAM_NAME=${BUILD_REPOSITORY_NAME}-${BUILD_SOURCEBRANCHNAME}
          echo python3 synopsys-azure-tools/azure-coverity-issues-tool.py --dir ./coverity-data/idir --url ${COVERITY_URL} --coverity-json coverity-output-v8.json --stream $COVERITY_STREAM_NAME
          python3 synopsys-azure-tools/azure-coverity-issues-tool.py --dir ./coverity-data/idir --url ${COVERITY_URL} --coverity-json coverity-output-v8.json --stream $COVERITY_STREAM_NAME
        displayName: Create Work Items for New Issues
        # Only create work items for pushes to a main branch
        condition: eq(variables['Build.SourceBranchName'], 'master')
        env:
          COV_USER: $(COV_USER)
          COVERITY_PASSPHRASE: $(COVERITY_PASSPHRASE)
          SYSTEM_ACCESSTOKEN: $(System.AccessToken)
