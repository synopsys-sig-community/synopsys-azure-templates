parameters:
  polaris_url: ""
  polaris_token: ""
  security_gate_args: "--new"
  system_accesstoken: ""

jobs:
  - job: CoverityOnPolaris

    variables:
      POLARIS_URL: ${{ parameters.polaris_url }}
      POLARIS_ACCESS_TOKEN: ${{ parameters.polaris_token }}
      SYNOPSYS_AZURE_TOOLS_REPO: https://github.com/synopsys-sig-community/synopsys-azure-tools
      SECURITY_GATE_ARGS: ${{ parameters.security_gate_args }}
      SYSTEM_ACCESSTOKEN_PARAM: ${{ parameters.system_accesstoken }}
      SYNOPSYS_CACHE_FOLDER: /home/vsts/.synopsys/polaris/coverity-analysis-tools

    steps:
      # Linux
      - bash: |
          export DOWNLOAD=$POLARIS_URL/api/tools/polaris_cli-linux64.zip
          echo "##vso[task.setvariable variable=POLARIS_DOWNLOAD]$DOWNLOAD"
        condition: eq( variables['Agent.OS'], 'Linux' )
        displayName: Get Polaris Download for Linux
      # macOS
      - bash: |
          export DOWNLOAD=$POLARIS_URL/api/tools/polaris_cli-macosx.zip
          echo "##vso[task.setvariable variable=POLARIS_DOWNLOAD]$DOWNLOAD"
        condition: eq( variables['Agent.OS'], 'Darwin' )
        displayName: Get Polaris Download for macOS
      # Windows
      - powershell: |
          Set-Variable -Name DOWNLOAD -Value $POLARIS_URL/api/tools/polaris_cli-win64.zip
          echo "##vso[task.setvariable variable=POLARIS_DOWNLOAD]$DOWNLOAD"
        condition: eq( variables['Agent.OS'], 'Windows_NT' )
        displayName: Get Polaris Download for Windows

      - bash: |
          curl -LsS -o polaris.zip $POLARIS_DOWNLOAD
          unzip -j -d polaris-cli polaris.zip
          ./polaris-cli/polaris --persist-config --co capture.build.buildCommands="null" --co capture.build.cleanCommands="null" --co capture.fileSystem="null" --co capture.coverity.autoCapture="enable" --co serverUrl=$POLARIS_URL configure
        displayName: Download and install Polaris CLI
        # Set up Polaris CLI if this is either a build against master, or a pull request
        condition: or(eq(variables['Build.SourceBranchName'], 'master'), eq(variables['Build.Reason'], 'PullRequest'))

      # Notes:
      # - Cache is reset on new branches, so for short-lived branches or branches with a single PR
      #   the benefit will not be as pronounced.
      # - Restoring large cached objects on Windows build agents can be very slow, reducing the benefit
      - task: Cache@2
        inputs:
          key: '"v2" | "synopsys" | "$(Agent.OS)"'
          path: $(SYNOPSYS_CACHE_FOLDER)
        displayName: Cache Synopsys Downloads

      - bash: find /home/vsts/.synopsys/polaris/coverity-analysis-tools -print || true
        displayName: Debug caching

      - bash: ./polaris-cli/polaris analyze -w
        displayName: Coverity SAST (Full analysis)
        # Run full analysis only on builds of master, not on pull requests
        condition: eq(variables['Build.SourceBranchName'], 'master')

      - bash: |
          REMOVE="refs/heads/"
          export POLARIS_FF_ENABLE_COVERITY_INCREMENTAL=true
          export SYSTEM_PULLREQUEST_TARGETBRANCHNAME="${SYSTEM_PULLREQUEST_TARGETBRANCH//$REMOVE/}"
          git --no-pager diff origin/$SYSTEM_PULLREQUEST_TARGETBRANCHNAME --name-only > ./change-set.txt
          set -x
          ./polaris-cli/polaris analyze -w --coverity-ignore-capture-failure --incremental ./change-set.txt
        displayName: 'Coverity Static Analysis (Incremental)'
        # Only run incremental analysis if it IS a pull request
        condition: eq(variables['Build.Reason'], 'PullRequest')

      - bash: git clone -q --depth 1 $SYNOPSYS_AZURE_TOOLS_REPO
        displayName: Get Synopsys Azure Tools
        # Get automation if either master or pull request
        condition: or(eq(variables['Build.SourceBranchName'], 'master'), eq(variables['Build.Reason'], 'PullRequest'))

      # Only use this for microsoft-hosted environments
      - task: UsePythonVersion@0
        displayName: Get Python Interpreter
        inputs:
          versionSpec: '3.7'
          addToPath: true
        name: pyTools
        # Set up Python if it is master or a pull request
        condition: or(eq(variables['Build.SourceBranchName'], 'master'), eq(variables['Build.Reason'], 'PullRequest'))

      - script: $(pyTools.pythonLocation)/bin/pip install --upgrade pandas requests jsonapi_requests
        displayName: Install Python Module Dependencies
        condition: or(eq(variables['Build.SourceBranchName'], 'master'), eq(variables['Build.Reason'], 'PullRequest'))

      - script: $(pyTools.pythonLocation)/bin/python synopsys-azure-tools/azure-polaris-issues-tool.py --url $POLARIS_URL --token $POLARIS_ACCESS_TOKEN --new --az-work-items --project jcroall-insecure-bank --debug 5
        env:
          SYSTEM_ACCESSTOKEN: $(System.AccessToken)
        displayName: Create Work Items for New Issues
        # Only create work items for pushes to a main branch
        condition: eq(variables['Build.SourceBranchName'], 'master')

      - script: $(pyTools.pythonLocation)/bin/python synopsys-azure-tools/azure-polaris-annotate-pr.py
        displayName: Annotate pull request
        env:
          SYSTEM_ACCESSTOKEN: ${{ parameters.system_accesstoken }}
        # Only annotate pull requests if... we are building for a pull request
        condition: eq(variables['Build.Reason'], 'PullRequest')
        continueOnError: true

      - script: $(pyTools.pythonLocation)/bin/python synopsys-azure-tools/azure-polaris-issues-tool.py --url $POLARIS_URL --token $POLARIS_ACCESS_TOKEN  --project jcroall-insecure-bank --debug 5 $SECURITY_GATE_ARGS --exit1-if-issues
        displayName: Check Polaris Security Gate
        # TODO: Also pass access token this way
        env:
          SYSTEM_ACCESSTOKEN: ${{ parameters.system_accesstoken }}
        # Break the build on central results only on master
        # TODO break the build differently on pull request
        condition: eq(variables['Build.SourceBranchName'], 'master')
        continueOnError: true

      - bash: find /home/vsts/.synopsys/polaris/coverity-analysis-tools -print || true
        displayName: Debug caching
