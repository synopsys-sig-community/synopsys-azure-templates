parameters:
  security_gate_args: "--new"

jobs:
  - job: CoverityOnPolaris

    variables:
      SYNOPSYS_AZURE_TOOLS_REPO: https://github.com/synopsys-sig-community/synopsys-azure-tools
      SECURITY_GATE_ARGS: ${{ parameters.security_gate_args }}

    steps:
      # Linux
      - bash: |
          export DOWNLOAD=$POLARIS_URL/api/tools/polaris_cli-linux64.zip
          echo "##vso[task.setvariable variable=POLARIS_DOWNLOAD]$DOWNLOAD"
        condition: eq( variables['Agent.OS'], 'Linux' )
        displayName: Get Polaris Download for Linux
        env:
          POLARIS_URL: $(POLARIS_URL)
      # macOS
      - bash: |
          export DOWNLOAD=$POLARIS_URL/api/tools/polaris_cli-macosx.zip
          echo "##vso[task.setvariable variable=POLARIS_DOWNLOAD]$DOWNLOAD"
        condition: eq( variables['Agent.OS'], 'Darwin' )
        displayName: Get Polaris Download for macOS
        env:
          POLARIS_URL: $(POLARIS_URL)
      # Windows
      - powershell: |
          Set-Variable -Name DOWNLOAD -Value $POLARIS_URL/api/tools/polaris_cli-win64.zip
          echo "##vso[task.setvariable variable=POLARIS_DOWNLOAD]$DOWNLOAD"
        condition: eq( variables['Agent.OS'], 'Windows_NT' )
        displayName: Get Polaris Download for Windows
        env:
          POLARIS_URL: $(POLARIS_URL)

      - bash: |
          curl -LsS -o polaris.zip $POLARIS_DOWNLOAD
          unzip -j -d polaris-cli polaris.zip
          ./polaris-cli/polaris --persist-config --co project.name=$BUILD_REPOSITORY_NAME --co capture.build.buildCommands="null" --co capture.build.cleanCommands="null" --co capture.fileSystem="null" --co capture.coverity.autoCapture="enable" --co serverUrl=$POLARIS_URL configure
          env
          cat polaris.yml
        displayName: Download and install Polaris CLI
        # Set up Polaris CLI if this is either a build against master, or a pull request
        condition: or(eq(variables['Build.SourceBranchName'], 'master'), eq(variables['Build.Reason'], 'PullRequest'))
        env:
          POLARIS_URL: $(POLARIS_URL)
          POLARIS_ACCESS_TOKEN: $(POLARIS_ACCESS_TOKEN)

      - bash: ./polaris-cli/polaris analyze -w
        displayName: Coverity SAST (Full analysis)
        # Run full analysis only on builds of master, not on pull requests
        condition: eq(variables['Build.SourceBranchName'], 'master')
        env:
          POLARIS_URL: $(POLARIS_URL)
          POLARIS_ACCESS_TOKEN: $(POLARIS_ACCESS_TOKEN)

      #- bash: |
      #    REMOVE="refs/heads/"
      #    export POLARIS_FF_ENABLE_COVERITY_INCREMENTAL=true
      #    export SYSTEM_PULLREQUEST_TARGETBRANCHNAME="${SYSTEM_PULLREQUEST_TARGETBRANCH//$REMOVE/}"
      #    git --no-pager diff origin/$SYSTEM_PULLREQUEST_TARGETBRANCHNAME --name-only > ./change-set.txt
      #    set -x
      #    ./polaris-cli/polaris analyze -w --coverity-ignore-capture-failure --incremental ./change-set.txt
      #  displayName: 'Coverity Static Analysis (Incremental)'
      #  # Only run incremental analysis if it IS a pull request
      #  condition: eq(variables['Build.Reason'], 'PullRequest')
      #  env:
      #    POLARIS_URL: $(POLARIS_URL)
      #    POLARIS_ACCESS_TOKEN: $(POLARIS_ACCESS_TOKEN)

      - bash: git clone -q --depth 1 $SYNOPSYS_AZURE_TOOLS_REPO
        displayName: Get Synopsys Azure Tools
        # Get automation if either master or pull request
        condition: or(eq(variables['Build.SourceBranchName'], 'master'), eq(variables['Build.Reason'], 'PullRequest'))

      # Only use this for microsoft-hosted environments
      - task: UsePythonVersion@0
        displayName: Get Python Interpreter
        inputs:
          versionSpec: '3.7'
          addToPath: true
        name: pyTools
        # Set up Python if it is master or a pull request
        condition: or(eq(variables['Build.SourceBranchName'], 'master'), eq(variables['Build.Reason'], 'PullRequest'))

      - script: $(pyTools.pythonLocation)/bin/pip install --upgrade pandas requests jsonapi_requests azure-devops
        displayName: Install Python Module Dependencies
        condition: or(eq(variables['Build.SourceBranchName'], 'master'), eq(variables['Build.Reason'], 'PullRequest'))

      - bash: python3 synopsys-azure-tools/git-assign-issues.py --url $POLARIS_URL --project $BUILD_REPOSITORY_NAME
        displayName: Assign issues to owners
          # Run full analysis only on builds of master, not on pull requests
        condition: eq(variables['Build.SourceBranchName'], 'master')
        env:
          POLARIS_URL: $(POLARIS_URL)
          POLARIS_ACCESS_TOKEN: $(POLARIS_ACCESS_TOKEN)

      - script: $(pyTools.pythonLocation)/bin/python synopsys-azure-tools/azure-polaris-issues-tool.py --url $POLARIS_URL --token $POLARIS_ACCESS_TOKEN --new --az-work-items --project $BUILD_REPOSITORY_NAME
        displayName: Create Work Items for New Issues
        # Only create work items for pushes to a main branch
        condition: eq(variables['Build.SourceBranchName'], 'master')
        env:
          SYSTEM_ACCESSTOKEN: $(System.AccessToken)
          POLARIS_URL: $(POLARIS_URL)
          POLARIS_ACCESS_TOKEN: $(POLARIS_ACCESS_TOKEN)

      #- script: $(pyTools.pythonLocation)/bin/python synopsys-azure-tools/azure-polaris-annotate-pr.py
      #  displayName: Annotate pull request
      #  env:
      #    SYSTEM_ACCESSTOKEN: $(System.AccessToken)
      #  # Only annotate pull requests if... we are building for a pull request
      #  condition: eq(variables['Build.Reason'], 'PullRequest')
      #  #continueOnError: true
      #  env:
      #    POLARIS_URL: $(POLARIS_URL)
      #    POLARIS_ACCESS_TOKEN: $(POLARIS_ACCESS_TOKEN)

      - script: $(pyTools.pythonLocation)/bin/python synopsys-azure-tools/azure-polaris-issues-tool.py --url $POLARIS_URL --token $POLARIS_ACCESS_TOKEN --project $BUILD_REPOSITORY_NAME $SECURITY_GATE_ARGS --exit1-if-issues
        displayName: Check Polaris Security Gate
        # Break the build on central results only on master
        # TODO break the build differently on pull request
        condition: eq(variables['Build.SourceBranchName'], 'master')
        env:
          POLARIS_URL: $(POLARIS_URL)
          POLARIS_ACCESS_TOKEN: $(POLARIS_ACCESS_TOKEN)
          SYSTEM_ACCESSTOKEN: $(System.AccessToken)
